buildscript {

    repositories {

        jcenter()

    }

}

plugins {

    id "java"
}

group = "com.bisa"
version = "1.0.1"
sourceCompatibility = "11"
def name = "automation"
def profile = "dev"

repositories {

    mavenCentral()
    flatDir {
        dirs "libs"
    }

}

dependencies {

    testImplementation group: "com.intuit.karate", name: "karate-apache", version: "0.9.6"
    testImplementation group: "com.intuit.karate", name: "karate-junit4", version: "1.1.0"

}

configurations {

    cucumberRuntime {

        extendsFrom testImplementation

    }

    compileOnly {

        extendsFrom annotationProcessor

    }

}

task acceptanceTest() {

    dependsOn assemble, testClasses
    doLast {

        javaexec {

            main = "io.cucumber.core.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            args = ["--plugin", "json:build/reports/cucumber/report.json", "--plugin", "html:build/reports/cucumber/acceptance-test-report.html", "--glue", "steps", "src/test/resources/cucumber"]

        }

    }

}

task localReport() {

    dependsOn classes, compileTestJava
    doLast {

        javaexec {

            classpath = sourceSets.test.runtimeClasspath
            main = "reports.LocalReport"

        }

    }

}


test {

    // pull karate options into the runtime
    systemProperty "karate.options", System.properties.getProperty("karate.options")
    // pull karate env into the runtime
    systemProperty "karate.env", System.properties.getProperty("karate.env")
    // ensure tests are always run
    outputs.upToDateWhen { false }

}

sourceSets {
    testintegration {
        java.srcDir "$projectDir/src/testintegration/java"
        resources.srcDir "$projectDir/src/testintegration/resources"
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

configurations {
    testintegrationImplementation.extendsFrom testImplementation
    testintegrationRuntime.extendsFrom testRuntime
}

task integrationTest(type: Test) {
    useJUnitPlatform()
    reports.html.destination = file("$buildDir/reports/integrationTest")
    testClassesDirs = sourceSets.testintegration.output.classesDirs
    classpath = sourceSets.testintegration.runtimeClasspath
}

check.dependsOn integrationTest
